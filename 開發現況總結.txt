
==========  2025/09/03 ===========

「今天吃什麼？」App 開發現況總結
這是一份為了讓接手的開發者或 AI 協作者能快速理解專案而撰寫的文件。本文件將概述專案的核心需求、目前的技術架構與程式碼亮點。

一、 專案核心需求 (Core Requirements)
本專案旨在開發一款名為「今天吃什麼？」的 Web App，核心目標是解決使用者的日常「用餐選擇困難症」，並提供一個充滿質感與樂趣的探索體驗。

核心功能:

互動式地圖探索: App 需能定位使用者，並讓使用者在真實地圖上，透過拖曳手把直觀地「畫」出一個圓形的美食探索半徑。

智慧美食分類: App 應自動抓取範圍內的所有餐廳，並透過後端 AI 進行智慧分類 (例如：義式風情 🍝, 健康早午餐 🥪)，讓使用者對周遭美食有宏觀的了解。

沉浸式探索流程: 使用者在地圖上探索時，應能無縫地瀏覽不同分類的店家列表，並查看各店家的基本資訊，過程不應有頻繁的頁面跳轉來打斷體驗。

充滿儀式感的隨機決定: 使用者可以將感興趣的店家加入「候選清單」。當猶豫不決時，透過一個設計精良、動畫流暢的「命運羅盤」來為他們做出最終決定。

UI/UX 風格要求:

高質感與舒適感: 整體風格追求「柔和的美食冒險手冊」，避免廉價感。介面需有大量留白，採用溫暖、協調的配色與優雅的字體。

流暢的動畫與微交互: 所有的頁面切換、元件互動都必須有精心設計的過場動畫，提供如原生 App 般順滑的沉浸式體驗。

二、 目前程式碼亮點與架構 (Current Highlights & Architecture)
目前的版本已經是一個功能相對完善的前後端分離 Web App 原型。

技術架構:

前端 (Frontend): 使用 HTML, CSS, JavaScript (Vanilla JS) 搭建，沒有使用任何前端框架，保持了專案的輕量與靈活性。地圖功能由開源的 Leaflet.js 函式庫實現。

後端 (Backend): 使用 Python 的 Flask 框架搭建一個簡單的 API 伺服器。目前它提供 /api/search 端點，回傳擴充過的模擬數據 (Mock Data)，其結構完全仿照未來串接真實 API 後的格式，包含了店家詳情、評論、照片等。

程式碼亮點:

心流式地圖探索體驗 (Flow-like Map Exploration):

這是目前版本最核心的設計亮點。我們拋棄了傳統「列表頁」和「地圖頁」分離的模式。

地圖即是畫布: 「附近的美食地圖」是探索的核心，所有互動都圍繞著地圖發生。

互動式預覽卡片: 點擊下方的分類標籤後，不會跳轉頁面，而是在地圖下方滑出該分類的「店家預覽卡片」。滑動或點擊這些卡片，地圖上對應的圖釘會立即做出反應（飛至地圖中央並打開資訊氣泡），實現了列表與地圖的完美連動，創造了不中斷的沉浸式探索流程。

精緻的 UI 與動畫:

命運羅盤: 隨機決定過程並非簡單的旋轉。我們用 JavaScript 實現了模擬真實物理慣性的動畫，從加速到優雅減速，最後結果以充滿戲劇性的「聚光燈」和「打字機」動畫揭曉，儀式感十足。

店家詳情頁: 點擊「更多」後，一個包含店家大圖、評論、營業時間的全螢幕詳情頁會從下方流暢滑出，提供了媲美原生 App 的體驗。

微交互: 從使用者位置的「呼吸脈衝」動畫，到點擊預覽卡片時地圖圖釘的「跳動」動畫，許多細節都經過打磨，提升了 App 的生命力。

清晰的前端程式碼架構:

狀態管理 (state): 在 js/app.js 中，我們使用一個中央 state 物件來管理整個應用的狀態（如當前頁面、使用者位置、候選清單等），讓資料流向清晰可控。

職責分離: JavaScript 程式碼被組織成 Maps, render, handlers 等物件，分別負責頁面導航、UI 渲染和事件處理，使得程式碼結構清晰，易於維護。

事件代理: 對於地圖上動態生成的「資訊氣泡」內的按鈕，我們使用了高效的事件代理模式來綁定事件，確保了功能的穩定性。

三、 後續開發方向
基於目前的良好基礎，下一步可以專注於將 App 與真實世界連接。

串接真實 API: 後端 app.py 已經預留了呼叫 Google Maps API 和 Gemini API 的程式碼邏輯。下一步的核心任務是申請 API 金鑰，並將模擬數據替換為真實的 API 請求。

數據持久化: 目前的「候選清單」在重新整理頁面後會消失。未來可以考慮使用 localStorage 或引入後端資料庫 (如 SQLite) 來保存使用者的清單。

完善錯誤處理: 增加更多錯誤處理機制，例如當 API 請求失敗、或是在特定區域找不到任何餐廳時，給予使用者更友善的提示。